/*
 * generated by Xtext
 */
package com.github.funthomas424242.language.generator

import com.github.funthomas424242.language.rezept.ProjektBeschreibung
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RezeptGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (e : resource.allContents.toIterable.filter(ProjektBeschreibung)) {
			fsa.generateFile(POMGenerator.getPOMFileName(e), POMGenerator.createPOMContent(e))
			fsa.generateFile(getDbkFileName(e,"book.dbk"), BookGenerator.createBookContent(e))
		}
	}
	
	
	def getDbkFileName(ProjektBeschreibung project, String fileName) {
		return project.groupId+"."+project.artifactId+"/src/main/docbkx/"+fileName;
	}
	
	
	
//	def compile(Rezept e) ''' 
//        «IF e.eContainer.fullyQualifiedName != null»
//            package «e.eContainer.fullyQualifiedName»;
//        «ENDIF»
//        
//        public class «e.name» «IF e.superType != null
//                »extends «e.superType.fullyQualifiedName» «ENDIF»{
//            «FOR f : e.features»
//                «f.compile»
//            «ENDFOR»
//        }
//    '''
 
//    def compile(Feature f) '''
//        private «f.type.fullyQualifiedName» «f.name»;
//        
//        public «f.type.fullyQualifiedName» get«f.name.toFirstUpper»() {
//            return «f.name»;
//        }
//        
//        public void set«f.name.toFirstUpper»(«f.type.fullyQualifiedName» «f.name») {
//            this.«f.name» = «f.name»;
//        }
//    '''
	
}
